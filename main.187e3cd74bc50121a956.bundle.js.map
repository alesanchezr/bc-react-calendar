{"version":3,"file":"main.187e3cd74bc50121a956.bundle.js","sources":["webpack:///./src/calendar/Event.js"],"sourcesContent":["import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport styled, { css } from \"styled-components\";\nimport { CalendarContext } from \"./Calendar\";\nimport { useDrag } from \"react-dnd\";\nexport const ItemTypes = {\n  EVENT: \"event\",\n  HORIZON_TOP: \"event-horizon-top\",\n  HORIZON_BOTTOM: \"event-horizon-bottom\"\n};\n\nconst EventBlock = styled.div`\n    background: blue;\n    border: 1px solid black;\n    position: absolute;\n    width: 90%;\n    top: 0;\n    left: 0;\n    cursor: pointer;\n    opacity: 0.95;\n    z-index: 10;\n    ${props => css`\n        margin-left: ${props.index * 2}px;\n        margin-top: ${props.offset}px;\n    `}\n\n    ${props => props.isDragging && css`\n        opacity: 0.4;\n    `}\n\n    ${props => props.isPreview && css`\n        z-index: -1;\n    `}\n\n    ${props =>\n      props.direction === \"horizontal\"\n        ? css`\n            width: ${props.size};\n          `\n        : css`\n            height: ${props.size};\n          `};\n`;\n\nconst EventLabel = styled.label`\n  float: left;\n  margin: 5px;\n  font-size: 12px;\n  z-index: 10;\n`;\nconst Invisible = styled.div`\n  position: relative;\n  width: 100%;\n  height: 100%;\n`;\n\nconst Horizon = ({ className, orientation, eventStart, eventEnd, duration, index }) => {\n    const { toggleDragMode } = useContext(CalendarContext);\n    const [props, drag] = useDrag({\n        item: {\n            type: [\"top\", \"left\"].includes(orientation)\n                ? ItemTypes.HORIZON_TOP\n                    : ItemTypes.HORIZON_BOTTOM,\n            orientation,\n            index,\n            start: eventStart,\n            end: eventEnd,\n            duration\n        },\n        begin: monitor => toggleDragMode(true)\n    });\n    return (\n        <div ref={drag} className={className}>\n        <i>{\"=\"}</i>\n        </div>\n    );\n};\nconst HorizonStyled = styled(Horizon)`\n    position: absolute;\n    z-index: 9;\n    font-size: 10px;\n    font-weight: 900;\n    text-align: center;\n    margin: auto;\n  ${props => css`\n    ${props.orientation}: 0px;\n    width: ${[\"top\", \"bottom\"].includes(props.orientation) ? \"100%\" : \"10px\"};\n    transform: rotate(${[\"top\", \"bottom\"].includes(props.orientation) ? \"0\" : \"90\"}deg);\n  `}\n  :hover {\n    opacity: 0.2;\n    height: 8px;\n    background: black;\n    ${props => css`\n      cursor: ${[\"top\", \"bottom\"].includes(props.orientation)\n        ? \"ns-resize\"\n        : \"ew-resize\"};\n    `}\n  }\n`;\n\nexport const Event = ({ label, start, end, duration, index, isPreview, offset }) => {\n    const { timeDirection, blockPixelSize, timeBlockMinutes, toggleDragMode } = useContext(CalendarContext);\n    const [{ isDragging }, drag ] = useDrag({\n        item: { type: ItemTypes.EVENT, index, duration, start, end },\n        collect: monitor => {\n            return ({\n                isDragging: !!monitor.isDragging()\n            })\n        },\n        begin: monitor => toggleDragMode(true)\n    });\n\n    return (\n        <EventBlock\n            ref={drag}\n            isDragging={isDragging}\n            isPreview={isPreview}\n            offset={offset}\n            direction={timeDirection}\n            index={index}\n            size={`${Math.floor((duration / timeBlockMinutes) * blockPixelSize)}px`}\n        >\n            { !isPreview &&\n                <Invisible>\n                    <HorizonStyled\n                        index={index}\n                        orientation={timeDirection === \"vertical\" ? \"top\" : \"left\"}\n                        eventStart={start}\n                        duration={duration}\n                        eventEnd={end}\n                    />\n                    <EventLabel>{label}</EventLabel>\n                    <HorizonStyled\n                        index={index}\n                        orientation={timeDirection === \"vertical\" ? \"bottom\" : \"right\"}\n                        eventStart={start}\n                        duration={duration}\n                        eventEnd={end}\n                    />\n                </Invisible>\n            }\n        </EventBlock>\n    );\n};\n\nEvent.propTypes = {\n  index: PropTypes.string.isRequired,\n  label: PropTypes.string\n};\n\nEvent.defaultProps = {\n  label: \"\",\n  index: \"0\"\n};\n"],"mappings":"AAKA","sourceRoot":""}